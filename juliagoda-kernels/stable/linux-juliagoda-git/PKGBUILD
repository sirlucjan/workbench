# Maintainer: Piotr Gorski <lucjan.lucjanov@gmail.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

### Tweak kernel options prior to a build via nconfig
_makenconfig=

### Tweak kernel options prior to a build via menuconfig
_makemenuconfig=

### Tweak kernel options prior to a build via xconfig
_makexconfig=

### Tweak kernel options prior to a build via gconfig
_makegconfig=

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
# See, https://bugs.archlinux.org/task/31187
_NUMAdisable=y

# Compile ONLY used modules to VASTLYreduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

# Use the current kernel's .config file
# Enabling this option will use the .config of the RUNNING kernel rather than
# the ARCH defaults. Useful when the package gets updated and you already went
# through the trouble of customizing your config options.  NOT recommended when
# a new kernel is released, but again, convenient for package bumps.
_use_current=

### Selecting linux-lucjan branding
# ATTENTION - one of two predefined values should be selected!
# 'yes' - enable linux-lucjan branding
# 'no' - disable linux-lucjan branding
_ll_branding='yes'

### Setting GCC/Clang flags for your processor
# To see which option to select, run the command:
# gcc -c -Q -march=native --help=target | grep march
# You can find the full list below:
# https://github.com/graysky2/kernel_compiler_patch#expanded-cpus-include
_compiler_tune=y

### Set performance governor as default
_per_gov=y

### Disable MQ-Deadline I/O scheduler
_mq_deadline_disable=y

### Disable Kyber I/O scheduler
_kyber_disable=y

### Selecting the CPU scheduler
# ATTENTION - one of three predefined values should be selected!
# 'bmq' - select 'BitMap Queue CPU scheduler'
# 'pds' - select 'Priority and Deadline based Skip list multiple queue CPU scheduler'
# 'none' - select 'Completely Fair Scheduler'
_cpusched='pds'

### Enable KBUILD_CFLAGS -O3
_cc_harder=y

### Running with a 1000 HZ tick rate
_1k_HZ_ticks=y

### Enable protect mappings under memory pressure
_mm_protect=y

### Enable multigenerational LRU
# ATTENTION - one of three predefined values should be selected!
# 'standard' - enable multigenerational LRU 
# 'stats' - enable multigenerational LRU with stats
# 'none' - disable multigenerational LRU
_lru_config='standard'

### Enable Linux Random Number Generator
_lrng_enable=y

### Enable TCP_CONG_BBR2
_tcp_bbr2=y

### Enable FULLCONENAT
_nf_cone=y

### Enable RTW88
_rtw88=

### Enable SPECULATIVE_PAGE_FAULT
# ATTENTION - one of two predefined values should be selected!
# 'standard' - enable SPECULATIVE_PAGE_FAULT
# 'stats' - enable support SPECULATIVE_PAGE_FAULT with stats
_spf_config='standard'

### Selecting the ZSTD kernel and modules compression level
# ATTENTION - one of two predefined values should be selected!
# 'ultra' - highest compression ratio
# 'normal' - standard compression ratio
# WARNING: the ultra settings can sometimes
# be counterproductive in both size and speed.
_zstd_level_value='ultra'

# Enable zram/zswap ZSTD compression
_zstd_swap_compression=y

# Disable DEBUG to lower the size of the kernel
_disable_debug=y

### Download ll-reverts patchset
# ATTENTION - one of two predefined values should be selected!
# 'stable' - stable releases (recommended)
# 'unstable' - rc releases (active only temporarily)
_ll_rev='stable'

### Download linux-lucjan patchset
# ATTENTION - one of four predefined values should be selected!
# 'current' - stable releases (recommended)
# 'pending' - resync stable releases (active only temporarily)
# 'testing' - rc releases (active only temporarily)
# 'trunk' - pre-rc releases (active only temporarily)
_linux_lucjan='current'

### Do not edit below this line unless you know what you're doing

pkgbase=linux-juliagoda-git
_pkgbase=linux-lucjan
# pkgname=('linux-juliagoda-git-kernel' 'linux-juliagoda-git-headers')
_major=5.18
_patches=${_major}-dev
_srcname=linux
pkgver=5.18.11.r0.gd39cd8e451f0.ll121
pkgrel=1
pkgdesc='Linux LL'
arch=('x86_64')
url="https://gitlab.com/sirlucjan/lucjan-kernels/wikis/README"
license=('GPL2')
options=('!strip')
makedepends=('bc' 'libelf' 'cpio' 'perl' 'tar' 'xz' 'git')
if [ -z "$_disable_debug" ]; then
    makedepends+=('pahole')
fi

### LL reverts
# Some patches for BFQ/block-stable conflict with
# patches for BFQ-dev/block-mainline.
# To use linux-lucjan smoothly do not change
# the settings below. Otherwise kernel
# will not compile.

if [ "$_ll_rev" = "stable" ]; then

# _llrevpath="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/${_patches}/ll-reverts/stable"
 _llrevpath="https://gitlab.com/sirlucjan/kernel-patches/raw/master/${_patches}/ll-reverts/stable"
 _llrevname='ll-reverts'
 _llrevver='ver1'
 _llrevpatch="${_major}-${_llrevname}-${_llrevver}.patch"

elif [ "$_ll_rev" = "unstable" ]; then

# _llrevpath="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/${_patches}/ll-reverts/unstable"
 _llrevpath="https://gitlab.com/sirlucjan/kernel-patches/raw/master/${_patches}/ll-reverts/unstable"
 _llrevname='ll-reverts'
 _llrevver='ver1'
 _llrevrc='rc1'
 _llrevpatch="${_major}-${_llrevname}-${_llrevver}-${_llrevrc}.patch"

fi

### linux-lucjan
# If you do not use the kernel development version (stable-rc)
# only the current branch will be used. Pending and testing branches
# are used only in development versions (stable-rc)
# and the trunk branch is used only in the first releases
# of the new kernel line or contains only temporary solutions.

if [ "$_linux_lucjan" = "current" ]; then

# _lucjanpath="https://raw.githubusercontent.com/sirlucjan/${_pkgbase}/master/current"
 _lucjanpath="https://gitlab.com/sirlucjan/${_pkgbase}/raw/master/current"
 _lucjanname='lucjan'
 _lucjanrev='ll121'
 _lucjanpatch="${_major}-${_lucjanname}-${_lucjanrev}.patch"

elif [ "$_linux_lucjan" = "pending" ]; then

# _lucjanpath="https://raw.githubusercontent.com/sirlucjan/${_pkgbase}/master/pending"
 _lucjanpath="https://gitlab.com/sirlucjan/${_pkgbase}/raw/master/pending"
 _lucjanname='lucjan'
 _lucjanrev='ll59'
 _lucjanpatch="${_major}-${_lucjanname}-${_lucjanrev}.patch"

elif [ "$_linux_lucjan" = "testing" ]; then

# _lucjanpath="https://raw.githubusercontent.com/sirlucjan/${_pkgbase}/master/testing"
 _lucjanpath="https://gitlab.com/sirlucjan/${_pkgbase}/raw/master/testing"
 _lucjanname='lucjan'
 _lucjanrev='ll122'
 _lucjanrc='rc1'
 _lucjanpatch="${_major}-${_lucjanname}-${_lucjanrev}-${_lucjanrc}.patch"

elif [ "$_linux_lucjan" = "trunk" ]; then

# _lucjanpath="https://raw.githubusercontent.com/sirlucjan/${_pkgbase}/master/trunk"
 _lucjanpath="https://gitlab.com/sirlucjan/${_pkgbase}/raw/master/trunk"
 _lucjanname='lucjan'
 _lucjanrev='ll22'
 _lucjanrc='rc1'
 _lucjanpatch="${_major}-${_lucjanname}-${_lucjanrev}-${_lucjanrc}.patch"

fi

source=("git://git.kernel.org/pub/scm/linux/kernel/git/stable/${_srcname}.git#branch=linux-${_major}.y"
         # ll-reverts
         # "${_llrevpath}/${_llrevpatch}"{,.sig}
         # linux-lucjan
        "${_lucjanpath}/${_lucjanpatch}"{,.sig}
         # the main kernel config files
        'config')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

pkgver() {
    cd $_srcname

    _ver="$(git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g')"
    printf ${_ver}.${_lucjanrev}
}

prepare() {
    cd $_srcname

    ### Setting version
        echo "Setting version..."
        sed -e "/^EXTRAVERSION =/s/=.*/=/" -i Makefile
        touch .scmversion
        scripts/setlocalversion --save-scmversion
        echo "-$pkgrel" > localversion.10-pkgrel
        echo "${pkgbase#linux}" > localversion.20-pkgname

    ### Patching sources
        local src
        for src in "${source[@]}"; do
          src="${src%%::*}"
          src="${src##*/}"
          [[ $src = *.patch ]] || continue
          echo "Applying patch $src..."
          patch -Np1 < "../$src"
        done

    ### Setting config
        echo "Setting config..."
        cp ../config .config

    ### Optionally use running kernel's config
	# code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
	if [ -n "$_use_current" ]; then
		if [[ -s /proc/config.gz ]]; then
			echo "Extracting config from /proc/config.gz..."
			# modprobe configs
			zcat /proc/config.gz > ./.config
		else
			warning "Your kernel was not compiled with IKCONFIG_PROC!"
			warning "You cannot read the current config!"
			warning "Aborting!"
			exit
		fi
	fi

    ### Selecting linux-lucjan branding
	if [ "$_ll_branding" = "yes" ]; then
		echo "Enabling linux-lucjan branding..."
		scripts/config --enable CONFIG_LL_BRANDING
	elif [ "$_ll_branding" = "no" ]; then
		echo "Disabling linux-lucjan branding..."
		scripts/config --disable CONFIG_LL_BRANDING
	else
		if [ -n "$_ll_branding" ]; then
			error "The value $_ll_branding is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Selecting linux-lucjan branding failed!"
		exit
	fi

    ### Set GCC/Clang flags
	if [ -n "$_compiler_tune" ]; then
		echo "Setting GCC/Clang flags for Intel Haswell CPU..."
		scripts/config --disable CONFIG_GENERIC_CPU
		scripts/config --enable CONFIG_MHASWELL
	fi

    ### Set performance governor
	if [ -n "$_per_gov" ]; then
		echo "Setting performance governor..."
		scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
		scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
		echo "Disabling uneeded governors..."
		scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
		scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
		scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
		scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
        fi

    ### Disable MQ-Deadline I/O scheduler
	if [ -n "$_mq_deadline_disable" ]; then
		echo "Disabling MQ-Deadline I/O scheduler..."
		scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE
	fi

    ### Disable Kyber I/O scheduler
	if [ -n "$_kyber_disable" ]; then
		echo "Disabling Kyber I/O scheduler..."
		scripts/config --disable CONFIG_MQ_IOSCHED_KYBER
	fi

    ### Selecting the CPU scheduler
	if [ "$_cpusched" = "bmq" ]; then
		echo "Selecting BMQ CPU scheduler..."
		scripts/config --enable CONFIG_SCHED_BMQ
		scripts/config --disable CONFIG_SCHED_PDS
	elif [ "$_cpusched" = "pds" ]; then
		echo "Selecting PDS CPU scheduler..."
		scripts/config --disable CONFIG_SCHED_BMQ
		scripts/config --enable CONFIG_SCHED_PDS
	elif [ "$_cpusched" = "none" ]; then
		echo "Selecting Completely Fair Scheduler..."
		scripts/config --disable CONFIG_SCHED_ALT
	else
		if [ -n "$_cpusched" ]; then
			error "The value $_cpusched is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Selecting the CPU scheduler failed!"
		exit
	fi

    ### Enable KBUILD_CFLAGS -O3
	if [ -n "$_cc_harder" ]; then
		echo "Enabling KBUILD_CFLAGS -O3..."
		scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
		scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
        fi

    ### Optionally set tickrate to 1000
	if [ -n "$_1k_HZ_ticks" ]; then
		echo "Setting tick rate to 1k..."
		scripts/config --disable CONFIG_HZ_300
		scripts/config --enable CONFIG_HZ_1000
		scripts/config --set-val CONFIG_HZ 1000
	fi

    ### Enable TCP_CONG_BBR2
	if [ -n "$_tcp_bbr2" ]; then
		echo "Disabling TCP_CONG_CUBIC..."
		scripts/config --module CONFIG_TCP_CONG_CUBIC
		scripts/config --disable CONFIG_DEFAULT_CUBIC
		echo "Enabling TCP_CONG_BBR2..."
		scripts/config --enable CONFIG_TCP_CONG_BBR2
		scripts/config --enable CONFIG_DEFAULT_BBR2
		scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr2
	fi

    ### Enable FULLCONENAT
	if [ -n "$_nf_cone" ]; then
		echo "Enabling FULLCONENAT..."
		scripts/config --module CONFIG_IP_NF_TARGET_FULLCONENAT
		scripts/config --module CONFIG_NETFILTER_XT_TARGET_FULLCONENAT
	fi

    ### Enable RTW88
	if [ -n "$_rtw88" ]; then
		echo "Enabling RTW88..."
		scripts/config --module CONFIG_RTW88_USB
		scripts/config --module CONFIG_RTW88_8822BU
		scripts/config --module CONFIG_RTW88_8822CU
		scripts/config --module CONFIG_RTW88_8723DU
		scripts/config --module CONFIG_RTW88_8821CU
	fi

    ### Enable SPECULATIVE_PAGE_FAULT
	if [ "$_spf_config" = "standard" ]; then
		echo "Enabling SPECULATIVE_PAGE_FAULT..."
		scripts/config --enable CONFIG_SPECULATIVE_PAGE_FAULT
		scripts/config --disable CONFIG_SPECULATIVE_PAGE_FAULT_STATS
	elif [ "$_spf_config" = "stats" ]; then
		echo "Enabling SPECULATIVE_PAGE_FAULT with stats..."
		scripts/config --enable CONFIG_SPECULATIVE_PAGE_FAULT
		scripts/config --enable CONFIG_SPECULATIVE_PAGE_FAULT_STATS
	else
		if [ -n "$_spf_config" ]; then
			error "The value $_spf_config is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Enabling SPECULATIVE_PAGE_FAULT failed!"
		exit
	fi

    ### Enable protect mappings under memory pressure
	if [ -n "$_mm_protect" ]; then
		echo "Enabling protect file mappings under memory pressure..."
		scripts/config --enable CONFIG_UNEVICTABLE_FILE
		scripts/config --set-val CONFIG_UNEVICTABLE_FILE_KBYTES_LOW 0
		scripts/config --set-val CONFIG_UNEVICTABLE_FILE_KBYTES_MIN 0
		echo "Enabling protect anonymous mappings under memory pressure..."
		scripts/config --enable CONFIG_UNEVICTABLE_ANON
		scripts/config --set-val CONFIG_UNEVICTABLE_ANON_KBYTES_LOW 0
		scripts/config --set-val CONFIG_UNEVICTABLE_ANON_KBYTES_MIN 0
	fi

    ### Enable multigenerational LRU
	if [ "$_lru_config" = "standard" ]; then
		echo "Enabling multigenerational LRU..."
		scripts/config --enable CONFIG_LRU_GEN
		scripts/config --enable CONFIG_LRU_GEN_ENABLED
		scripts/config --disable CONFIG_LRU_GEN_STATS
	elif [ "$_lru_config" = "stats" ]; then
		echo "Enabling multigenerational LRU with stats..."
		scripts/config --enable CONFIG_LRU_GEN
		scripts/config --enable CONFIG_LRU_GEN_ENABLED
		scripts/config --enable CONFIG_LRU_GEN_STATS
	elif [ "$_lru_config" = "none" ]; then
		echo "Disabling multigenerational LRU..."
		scripts/config --disable CONFIG_LRU_GEN
	else
		if [ -n "$_lru_config" ]; then
			error "The value $_lru_config is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Enabling multigenerational LRU failed!"
		exit
	fi

    ### Enable Linux Random Number Generator
	if [ -n "$_lrng_enable" ]; then
		echo "Enabling Linux Random Number Generator..."
		scripts/config --disable CONFIG_RANDOM_DEFAULT_IMPL
		scripts/config --enable CONFIG_LRNG
		scripts/config --enable CONFIG_LRNG_SHA256
		scripts/config --enable CONFIG_LRNG_COMMON_DEV_IF
		scripts/config --enable CONFIG_LRNG_DRNG_ATOMIC
		scripts/config --enable CONFIG_LRNG_SYSCTL
		scripts/config --enable CONFIG_LRNG_RANDOM_IF
		scripts/config --module CONFIG_LRNG_KCAPI_IF
		scripts/config --module CONFIG_LRNG_HWRAND_IF
		scripts/config --enable CONFIG_LRNG_DEV_IF
		scripts/config --enable CONFIG_LRNG_RUNTIME_ES_CONFIG
		scripts/config --enable CONFIG_LRNG_IRQ_DFLT_TIMER_ES
		scripts/config --disable CONFIG_LRNG_SCHED_DFLT_TIMER_ES
		scripts/config --enable CONFIG_LRNG_TIMER_COMMON
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_256
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_512
		scripts/config --enable CONFIG_LRNG_COLLECTION_SIZE_1024
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_2048
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_4096
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_8192
		scripts/config --set-val CONFIG_LRNG_COLLECTION_SIZE 1024
		scripts/config --enable CONFIG_LRNG_HEALTH_TESTS
		scripts/config --set-val CONFIG_LRNG_RCT_CUTOFF 31
		scripts/config --set-val CONFIG_LRNG_APT_CUTOFF 325
		scripts/config --enable CONFIG_LRNG_IRQ
		scripts/config --enable CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED
		scripts/config --disable CONFIG_LRNG_CONTINUOUS_COMPRESSION_DISABLED
		scripts/config --enable CONFIG_LRNG_ENABLE_CONTINUOUS_COMPRESSION
		scripts/config --enable CONFIG_LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION
		scripts/config --set-val CONFIG_LRNG_IRQ_ENTROPY_RATE 256
		scripts/config --enable CONFIG_LRNG_JENT
		scripts/config --set-val CONFIG_LRNG_JENT_ENTROPY_RATE 16
		scripts/config --enable CONFIG_LRNG_CPU
		scripts/config --set-val CONFIG_LRNG_CPU_FULL_ENT_MULTIPLIER 1
		scripts/config --set-val CONFIG_LRNG_CPU_ENTROPY_RATE 8
		scripts/config --enable CONFIG_LRNG_SCHED
		scripts/config --set-val CONFIG_LRNG_SCHED_ENTROPY_RATE 4294967295
		scripts/config --enable CONFIG_LRNG_DRNG_CHACHA20
		scripts/config --module CONFIG_LRNG_DRBG
		scripts/config --module CONFIG_LRNG_DRNG_KCAPI
		scripts/config --enable CONFIG_LRNG_SWITCH
		scripts/config --enable CONFIG_LRNG_SWITCH_HASH
		scripts/config --module CONFIG_LRNG_HASH_KCAPI
		scripts/config --enable CONFIG_LRNG_SWITCH_DRNG
		scripts/config --module CONFIG_LRNG_SWITCH_DRBG
		scripts/config --module CONFIG_LRNG_SWITCH_DRNG_KCAPI
		scripts/config --enable CONFIG_LRNG_DFLT_DRNG_CHACHA20
		scripts/config --disable CONFIG_LRNG_DFLT_DRNG_DRBG
		scripts/config --disable CONFIG_LRNG_DFLT_DRNG_KCAPI
		scripts/config --enable CONFIG_LRNG_TESTING_MENU
		scripts/config --disable CONFIG_LRNG_RAW_HIRES_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_JIFFIES_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_IRQ_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_RETIP_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_REGS_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_ARRAY
		scripts/config --disable CONFIG_LRNG_IRQ_PERF
		scripts/config --disable CONFIG_LRNG_RAW_SCHED_HIRES_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_SCHED_PID_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_SCHED_START_TIME_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_SCHED_NVCSW_ENTROPY
		scripts/config --disable CONFIG_LRNG_SCHED_PERF
		scripts/config --disable CONFIG_LRNG_ACVT_HASH
		scripts/config --disable CONFIG_LRNG_RUNTIME_MAX_WO_RESEED_CONFIG
		scripts/config --disable CONFIG_LRNG_TEST_CPU_ES_COMPRESSION
		scripts/config --enable CONFIG_LRNG_SELFTEST
		scripts/config --disable CONFIG_LRNG_SELFTEST_PANIC
	fi

    ### Optionally disable NUMA for 64-bit kernels only
        # (x86 kernels do not support NUMA)
	if [ -n "$_NUMAdisable" ]; then
		echo "Disabling NUMA from kernel config..."
		scripts/config --disable CONFIG_NUMA
	fi

    ### Selecting the ZSTD modules and kernel compression level
	if [ "$_zstd_level_value" = "ultra" ]; then
		echo "Enabling highest ZSTD modules compression ratio..."
		scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL 19
		scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD_ULTRA
		scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL_ULTRA 22
		echo "Enabling highest ZSTD kernel compression ratio..."
		scripts/config --set-val CONFIG_ZSTD_COMP_VAL 22
	elif [ "$_zstd_level_value" = "normal" ]; then
		echo "Enabling standard ZSTD modules compression ratio..."
		scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL 19
		scripts/config --disable CONFIG_MODULE_COMPRESS_ZSTD_ULTRA
		echo "Enabling standard ZSTD kernel compression ratio..."
		scripts/config --set-val CONFIG_ZSTD_COMP_VAL 19
	else
		if [ -n "$_zstd_level_value" ]; then
			error "The value $_zstd_level_value is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Selecting the ZSTD modules and kernel compression level failed!"
		exit
	fi

    ### Enable zram/zswap ZSTD compression
	if [ -n "$_zstd_swap_compression" ]; then
		echo "Enabling zram ZSTD compression..."
		scripts/config --disable CONFIG_ZRAM_DEF_COMP_LZORLE
		scripts/config --enable CONFIG_ZRAM_DEF_COMP_ZSTD
		scripts/config --set-str CONFIG_ZRAM_DEF_COMP zstd
		echo "Enabling zswap ZSTD compression..."
		scripts/config --disable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4
		scripts/config --enable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_ZSTD
		scripts/config --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT zstd
		echo "Enabling zram entropy calculation..."
		scripts/config --enable CONFIG_ZRAM_ENTROPY
		scripts/config --set-val CONFIG_ZRAM_ENTROPY_THRESHOLD 100000
	fi

    ### Disable DEBUG
	if [ -n "$_disable_debug" ]; then
		echo "Disabling DEBUG..."
		scripts/config --disable CONFIG_DEBUG_INFO
		scripts/config --disable CONFIG_DEBUG_INFO_BTF
		scripts/config --disable CONFIG_DEBUG_INFO_DWARF5
		scripts/config --disable CONFIG_PAHOLE_HAS_SPLIT_BTF
		scripts/config --disable CONFIG_DEBUG_INFO_BTF_MODULES
		scripts/config --disable CONFIG_CGROUP_BPF
		scripts/config --disable CONFIG_BPF_LSM
		scripts/config --disable CONFIG_BPF_PRELOAD
		scripts/config --disable CONFIG_BPF_LIRC_MODE2
		scripts/config --disable CONFIG_BPF_KPROBE_OVERRIDE
		scripts/config --disable CONFIG_PM_DEBUG
		scripts/config --disable CONFIG_PM_SLEEP_DEBUG
		scripts/config --disable CONFIG_ACPI_DEBUG
		scripts/config --disable CONFIG_SCHED_DEBUG
		scripts/config --disable CONFIG_LATENCYTOP
		scripts/config --disable CONFIG_DEBUG_PREEMPT
	fi

    ### Optionally load needed modules for the make localmodconfig
        # See https://aur.archlinux.org/packages/modprobed-db
	if [ -n "$_localmodcfg" ]; then
		if [ -f $HOME/.config/modprobed.db ]; then
		echo "Running Steven Rostedt's make localmodconfig now"
		make LSMOD=$HOME/.config/modprobed.db localmodconfig
	else
		echo "No modprobed.db data found"
		exit
		fi
	fi

    ### Rewrite configuration
        echo "Rewrite configuration..."
        make prepare
        yes "" | make config >/dev/null
        diff -u ../config .config || :

    ### Prepared version
        make -s kernelrelease > version
        echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
	[[ -z "$_makenconfig" ]] ||  make nconfig

    ### Running make menuconfig
	[[ -z "$_makemenuconfig" ]] || make menuconfig

    ### Running make xconfig
	[[ -z "$_makexconfig" ]] || make xconfig

    ### Running make gconfig
	[[ -z "$_makegconfig" ]] || make gconfig

    ### Save configuration for later reuse
	echo "Save configuration for later reuse..."
	cat .config > "${startdir}/config.last"
}

build() {
  cd $_srcname

  make all
}

_package-kernel() {
  pkgdesc="The $pkgdesc kernel and modules with the ${_lucjanname}-${_lucjanrev} patchset. Fourth Gen Intel Core i3/i5/i7 optimized."
  depends=('coreutils' 'kmod' 'initramfs-lucjan')
  optdepends=('wireless-regdb: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices'
              'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
              'uksmd: Userspace KSM helper daemon')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE UKSMD-BUILTIN)
  groups=('linux-juliagoda-git')

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel. Fourth Gen Intel Core i3/i5/i7 optimized."
  depends=('linux-juliagoda-git-kernel' 'pahole')
  groups=('linux-juliagoda-git')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
        install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
  fi

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase-kernel" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

sha512sums=('SKIP'
            '6623f5f2f206fd1efd747d57ec748fc57f553d8b94e38dafd9ee2499b90deb3b39f09d8f3f5f225c7c311aff3a1bacfa3adf5fc88b20ae6d9d566422e751f429'
            'SKIP'
            '89e66bcd50281aba3bdff2d0090f26e5cc7e08c0949d77a776d68a8a479a86a025af72771599393e569f4b56ade5077288077dae5f2b0c8ec1eb55871f80a911')

validpgpkeys=(
              '399521CE9D6D65B35EEF0F8C79AFA05ABDB26C5A' # Piotr Gorski
             )
