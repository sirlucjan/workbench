# Maintainer: Piotr Gorski <lucjan.lucjanov@gmail.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

### Tweak kernel options prior to a build via nconfig
_makenconfig=

### Tweak kernel options prior to a build via menuconfig
_makemenuconfig=

### Tweak kernel options prior to a build via xconfig
_makexconfig=

### Tweak kernel options prior to a build via gconfig
_makegconfig=

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
# See, https://bugs.archlinux.org/task/31187
_NUMAdisable=y

# Compile ONLY used modules to VASTLYreduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

# Use the current kernel's .config file
# Enabling this option will use the .config of the RUNNING kernel rather than
# the ARCH defaults. Useful when the package gets updated and you already went
# through the trouble of customizing your config options.  NOT recommended when
# a new kernel is released, but again, convenient for package bumps.
_use_current=

### Selecting linux-lucjan branding
# ATTENTION - one of two predefined values should be selected!
# 'yes' - enable linux-lucjan branding
# 'no' - disable linux-lucjan branding
_ll_branding='yes'

### Setting GCC/Clang flags for your processor
# To see which option to select, run the command:
# gcc -c -Q -march=native --help=target | grep march
# You can find the full list below:
# https://github.com/graysky2/kernel_compiler_patch#expanded-cpus-include
_compiler_tune=y

### Disable MQ-Deadline I/O scheduler
_mq_deadline_disable=y

### Disable Kyber I/O scheduler
_kyber_disable=y

### Selecting the CPU scheduler
# ATTENTION - one of four predefined values should be selected!
# 'bmq' - select 'BitMap Queue CPU scheduler'
# 'pds' - select 'Priority and Deadline based Skip list multiple queue CPU scheduler'
# 'cacule' - select 'CacULE scheduler'
# 'none' - select 'Completely Fair Scheduler'
_cpusched='pds'

### Enable KBUILD_CFLAGS -O3
_cc_harder=y

### Running with a 1000 HZ tick rate
_1k_HZ_ticks=y

### Enable protect mappings under memory pressure
_mm_protect=y

### Enable multigenerational LRU
# ATTENTION - one of three predefined values should be selected!
# 'zen' - enable multigenerational LRU with zenkernel config
# 'xanmod' - enable multigenerational LRU with xanmod config
# 'none' - disable multigenerational LRU
_lru_config='none'

### Enable Linux Random Number Generator 
# ATTENTION - one of three predefined values should be selected!
# 'pfkernel' - enable Linux Random Number Generator with pfkernel config
# 'xanmod' - enable Linux Random Number Generator with xanmod config
# 'none' - disable Linux Random Number Generator 
_lrng_config='none'

### Enable TCP_CONG_BBR2
_tcp_bbr2=y

### Enable FULLCONENAT
# WARNING Not recommended.
# An experimental solution, still in testing phase.
# Possible compilation and installation errors.
# Leave it unselected.
_nf_cone=

### Enable SECURITY_FORK_BRUTE
# WARNING Not recommended.
# An experimental solution, still in testing phase.
# Possible compilation and installation errors.
# Leave it unselected.
_fork_brute=

### Enable DAMON
_pf_damon=

### Selecting the ZSTD compression level
# ATTENTION - one of two predefined values should be selected!
# 'ultra' - highest compression ratio
# 'normal' - standard compression ratio
_zstd_level='ultra'

### Selecting the ZSTD module compression level
# ATTENTION - one of two predefined values should be selected!
# 'ultra' - highest compression ratio
# 'normal' - standard compression ratio
# WARNING: the ultra settings can sometimes
# be counterproductive in both size and speed.
_zstd_module_level='normal'

### Download ll-reverts patchset
# ATTENTION - one of two predefined values should be selected!
# 'stable' - stable releases (recommended)
# 'unstable' - rc releases (active only temporarily)
_ll_rev='stable'

### Download linux-lucjan patchset
# ATTENTION - one of four predefined values should be selected!
# 'current' - stable releases (recommended)
# 'pending' - resync stable releases (active only temporarily)
# 'testing' - rc releases (active only temporarily)
# 'trunk' - pre-rc releases (active only temporarily)
_linux_lucjan='trunk'

### Do not edit below this line unless you know what you're doing

pkgbase=linux-juliagoda-git
_pkgbase=linux-lucjan
# pkgname=('linux-juliagoda-git-kernel' 'linux-juliagoda-git-headers' 'linux-juliagoda-docs-headers')
_major=5.15
_patches=${_major}-dev
_srcname=linux
pkgver=5.15.6.r0.ga2547651bc89.ll68
pkgrel=1
pkgdesc='Linux LL'
arch=('x86_64')
url="https://gitlab.com/sirlucjan/lucjan-kernels/wikis/README"
license=('GPL2')
options=('!strip')
makedepends=('kmod' 'bc' 'libelf' 'git' 'python-sphinx' 'python-sphinx_rtd_theme'
             'graphviz' 'imagemagick' 'pahole' 'cpio' 'perl' 'tar' 'xz')

### LL reverts
# Some patches for BFQ/block-stable conflict with
# patches for BFQ-dev/block-mainline.
# To use linux-lucjan smoothly do not change
# the settings below. Otherwise kernel
# will not compile.

if [ "$_ll_rev" = "stable" ]; then

# _llrevpath="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/${_patches}/ll-reverts/stable"
 _llrevpath="https://gitlab.com/sirlucjan/kernel-patches/raw/master/${_patches}/ll-reverts/stable"
 _llrevname='ll-reverts'
 _llrevver='ver1'
 _llrevpatch="${_major}-${_llrevname}-${_llrevver}.patch"

elif [ "$_ll_rev" = "unstable" ]; then

# _llrevpath="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/${_patches}/ll-reverts/unstable"
 _llrevpath="https://gitlab.com/sirlucjan/kernel-patches/raw/master/${_patches}/ll-reverts/unstable"
 _llrevname='ll-reverts'
 _llrevver='ver1'
 _llrevrc='rc1'
 _llrevpatch="${_major}-${_llrevname}-${_llrevver}-${_llrevrc}.patch"

fi

### linux-lucjan
# If you do not use the kernel development version (stable-rc)
# only the current branch will be used. Pending and testing branches
# are used only in development versions (stable-rc)
# and the trunk branch is used only in the first releases
# of the new kernel line or contains only temporary solutions.

if [ "$_linux_lucjan" = "current" ]; then

# _lucjanpath="https://raw.githubusercontent.com/sirlucjan/${_pkgbase}/master/current"
 _lucjanpath="https://gitlab.com/sirlucjan/${_pkgbase}/raw/master/current"
 _lucjanname='lucjan'
 _lucjanrev='ll68'
 _lucjanpatch="${_major}-${_lucjanname}-${_lucjanrev}.patch"

elif [ "$_linux_lucjan" = "pending" ]; then

# _lucjanpath="https://raw.githubusercontent.com/sirlucjan/${_pkgbase}/master/pending"
 _lucjanpath="https://gitlab.com/sirlucjan/${_pkgbase}/raw/master/pending"
 _lucjanname='lucjan'
 _lucjanrev='ll68'
 _lucjanpatch="${_major}-${_lucjanname}-${_lucjanrev}.patch"

elif [ "$_linux_lucjan" = "testing" ]; then

# _lucjanpath="https://raw.githubusercontent.com/sirlucjan/${_pkgbase}/master/testing"
 _lucjanpath="https://gitlab.com/sirlucjan/${_pkgbase}/raw/master/testing"
 _lucjanname='lucjan'
 _lucjanrev='ll68'
 _lucjanrc='rc1'
 _lucjanpatch="${_major}-${_lucjanname}-${_lucjanrev}-${_lucjanrc}.patch"

elif [ "$_linux_lucjan" = "trunk" ]; then

# _lucjanpath="https://raw.githubusercontent.com/sirlucjan/${_pkgbase}/master/trunk"
 _lucjanpath="https://gitlab.com/sirlucjan/${_pkgbase}/raw/master/trunk"
 _lucjanname='lucjan'
 _lucjanrev='ll68'
 _lucjanrc='rc1'
 _lucjanpatch="${_major}-${_lucjanname}-${_lucjanrev}-${_lucjanrc}.patch"

fi

source=("git://git.kernel.org/pub/scm/linux/kernel/git/stable/${_srcname}.git#branch=linux-${_major}.y"
         # ll-reverts
         # "${_llrevpath}/${_llrevpatch}"{,.sig}
         # linux-lucjan
        "${_lucjanpath}/${_lucjanpatch}"{,.sig}
         # the main kernel config files
        'config')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

pkgver() {
    cd $_srcname

    _ver="$(git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g')"
    printf ${_ver}.${_lucjanrev}
}

prepare() {
    cd $_srcname

    ### Setting version
        echo "Setting version..."
        sed -e "/^EXTRAVERSION =/s/=.*/=/" -i Makefile
        touch .scmversion
        scripts/setlocalversion --save-scmversion
        echo "-$pkgrel" > localversion.10-pkgrel
        echo "${pkgbase#linux}" > localversion.20-pkgname

    ### Patching sources
        local src
        for src in "${source[@]}"; do
          src="${src%%::*}"
          src="${src##*/}"
          [[ $src = *.patch ]] || continue
          echo "Applying patch $src..."
          patch -Np1 < "../$src"
        done

    ### Setting config
        echo "Setting config..."
        cp ../config .config

    ### Optionally use running kernel's config
	# code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
	if [ -n "$_use_current" ]; then
		if [[ -s /proc/config.gz ]]; then
			echo "Extracting config from /proc/config.gz..."
			# modprobe configs
			zcat /proc/config.gz > ./.config
		else
			warning "Your kernel was not compiled with IKCONFIG_PROC!"
			warning "You cannot read the current config!"
			warning "Aborting!"
			exit
		fi
	fi

    ### Selecting linux-lucjan branding
	if [ "$_ll_branding" = "yes" ]; then
		echo "Enabling linux-lucjan branding..."
		scripts/config --enable CONFIG_LL_BRANDING
	elif [ "$_ll_branding" = "no" ]; then
		echo "Disabling linux-lucjan branding..."
		scripts/config --disable CONFIG_LL_BRANDING
	else
		if [ -n "$_ll_branding" ]; then
			error "The value $_ll_branding is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Selecting linux-lucjan branding failed!"
		exit
	fi

    ### Set GCC/Clang flags
	if [ -n "$_compiler_tune" ]; then
		echo "Setting GCC/Clang flags for AMD K10-family CPU..."
		scripts/config --disable CONFIG_GENERIC_CPU
		scripts/config --enable CONFIG_MK10
	fi

    ### Disable MQ-Deadline I/O scheduler
	if [ -n "$_mq_deadline_disable" ]; then
		echo "Disabling MQ-Deadline I/O scheduler..."
		scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE
	fi

    ### Disable Kyber I/O scheduler
	if [ -n "$_kyber_disable" ]; then
		echo "Disabling Kyber I/O scheduler..."
		scripts/config --disable CONFIG_MQ_IOSCHED_KYBER
	fi

    ### Selecting the CPU scheduler
	if [ "$_cpusched" = "bmq" ]; then
		echo "Selecting BMQ CPU scheduler..."
		scripts/config --enable CONFIG_SCHED_BMQ
		scripts/config --disable CONFIG_SCHED_PDS
	elif [ "$_cpusched" = "pds" ]; then
		echo "Selecting PDS CPU scheduler..."
		scripts/config --disable CONFIG_SCHED_BMQ
		scripts/config --enable CONFIG_SCHED_PDS
	elif [ "$_cpusched" = "cacule" ]; then
		echo "Selecting CacULE scheduler..."
		scripts/config --disable CONFIG_SCHED_ALT
		scripts/config --enable CONFIG_CACULE_SCHED
		scripts/config --enable CONFIG_CACULE_RDB
		scripts/config --set-val CONFIG_RDB_INTERVAL 19
	elif [ "$_cpusched" = "none" ]; then
		echo "Selecting Completely Fair Scheduler..."
		scripts/config --disable CONFIG_SCHED_ALT
	else
		if [ -n "$_cpusched" ]; then
			error "The value $_cpusched is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Selecting the CPU scheduler failed!"
		exit
	fi

    ### Enable KBUILD_CFLAGS -O3
	if [ -n "$_cc_harder" ]; then
		echo "Enabling KBUILD_CFLAGS -O3..."
		scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
		scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
        fi

    ### Optionally set tickrate to 1000
	if [ -n "$_1k_HZ_ticks" ]; then
		echo "Setting tick rate to 1k..."
		scripts/config --disable CONFIG_HZ_300
		scripts/config --enable CONFIG_HZ_1000
		scripts/config --set-val CONFIG_HZ 1000
	fi

    ### Enable TCP_CONG_BBR2
	if [ -n "$_tcp_bbr2" ]; then
		echo "Disabling TCP_CONG_CUBIC..."
		scripts/config --module CONFIG_TCP_CONG_CUBIC
		scripts/config --disable CONFIG_DEFAULT_CUBIC
		echo "Enabling TCP_CONG_BBR2..."
		scripts/config --enable CONFIG_TCP_CONG_BBR2
		scripts/config --enable CONFIG_DEFAULT_BBR2
		scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr2
	fi

    ### Enable FULLCONENAT
	if [ -n "$_nf_cone" ]; then
		echo "Enabling FULLCONENAT..."
		scripts/config --module CONFIG_IP_NF_TARGET_FULLCONENAT
		scripts/config --module CONFIG_NETFILTER_XT_TARGET_FULLCONENAT
	fi

    ### Enable SECURITY_FORK_BRUTE
	if [ -n "$_fork_brute" ]; then
		echo "Enabling SECURITY_FORK_BRUTE..."
		scripts/config --enable CONFIG_SECURITY_FORK_BRUTE
		scripts/config --set-str CONFIG_LSM landlock,lockdown,brute,yama,bpf
	fi

    ### Enable DAMON
	if [ -n "$_pf_damon" ]; then
		echo "Enabling DAMON..."
		scripts/config --enable CONFIG_DAMON
		scripts/config --disable CONFIG_DAMON_VADDR
		scripts/config --disable CONFIG_DAMON_DBGFS
		scripts/config --enable CONFIG_DAMON_PADDR
		scripts/config --enable CONFIG_DAMON_RECLAIM
	fi

    ### Enable protect mappings under memory pressure
	if [ -n "$_mm_protect" ]; then
		echo "Enabling protect file mappings under memory pressure..."
		scripts/config --enable CONFIG_UNEVICTABLE_FILE
		scripts/config --set-val CONFIG_UNEVICTABLE_FILE_KBYTES_LOW 262144
		scripts/config --set-val CONFIG_UNEVICTABLE_FILE_KBYTES_MIN 131072
		echo "Enabling protect anonymous mappings under memory pressure..."
		scripts/config --enable CONFIG_UNEVICTABLE_ANON
		scripts/config --set-val CONFIG_UNEVICTABLE_ANON_KBYTES_LOW 65536
		scripts/config --set-val CONFIG_UNEVICTABLE_ANON_KBYTES_MIN 32768
	fi

    ### Enable multigenerational LRU
	if [ "$_lru_config" = "zen" ]; then
		echo "Enabling multigenerational LRU with zenkernel config..."
		scripts/config --enable CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG
		scripts/config --enable CONFIG_LRU_GEN
		scripts/config --set-val CONFIG_NR_LRU_GENS 7
		scripts/config --set-val CONFIG_TIERS_PER_GEN 4
		scripts/config --enable CONFIG_LRU_GEN_ENABLED
		scripts/config --disable CONFIG_LRU_GEN_STATS
	elif [ "$_lru_config" = "xanmod" ]; then
		echo "Enabling multigenerational LRU with xanmod config..."
		scripts/config --enable CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG
		scripts/config --enable CONFIG_LRU_GEN
		scripts/config --set-val CONFIG_NR_LRU_GENS 4
		scripts/config --set-val CONFIG_TIERS_PER_GEN 2
		scripts/config --disable CONFIG_LRU_GEN_ENABLED
		scripts/config --disable CONFIG_LRU_GEN_STATS
	elif [ "$_lru_config" = "none" ]; then
		echo "Disabling multigenerational LRU..."
		scripts/config --disable CONFIG_LRU_GEN
	else
		if [ -n "$_lru_config" ]; then
			error "The value $_lru_config is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Enabling multigenerational LRU failed!"
		exit
	fi

    ### Enable Linux Random Number Generator
	if [ "$_lrng_config" = "pfkernel" ]; then
		echo "Enabling Linux Random Number Generator with pfkernel config..."
		scripts/config --enable CONFIG_LRNG
		scripts/config --enable CONFIG_LRNG_OVERSAMPLE_ENTROPY_SOURCES
		scripts/config --set-val CONFIG_CONFIG_LRNG_OVERSAMPLE_ES_BITS 64
		scripts/config --set-val CONFIG_LRNG_SEED_BUFFER_INIT_ADD_BITS 128
		scripts/config --enable CONFIG_LRNG_IRQ
		scripts/config --enable CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED
		scripts/config --disable CONFIG_LRNG_CONTINUOUS_COMPRESSION_DISABLED
		scripts/config --enable CONFIG_LRNG_ENABLE_CONTINUOUS_COMPRESSION
		scripts/config --enable CONFIG_LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_512
		scripts/config --enable CONFIG_LRNG_COLLECTION_SIZE_1024
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_2048
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_4096
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_8192
		scripts/config --set-val CONFIG_LRNG_COLLECTION_SIZE 1024
		scripts/config --enable CONFIG_LRNG_HEALTH_TESTS
		scripts/config --set-val CONFIG_LRNG_RCT_CUTOFF 31
		scripts/config --set-val CONFIG_LRNG_APT_CUTOFF 325
		scripts/config --set-val CONFIG_LRNG_IRQ_ENTROPY_RATE 256
		scripts/config --enable CONFIG_LRNG_JENT
		scripts/config --set-val CONFIG_LRNG_JENT_ENTROPY_RATE 16
		scripts/config --enable CONFIG_LRNG_CPU
		scripts/config --set-val CONFIG_LRNG_CPU_ENTROPY_RATE 8
		scripts/config --enable CONFIG_LRNG_DRNG_SWITCH
		scripts/config --enable CONFIG_LRNG_KCAPI_HASH
		scripts/config --module CONFIG_LRNG_DRBG
		scripts/config --module CONFIG_LRNG_KCAPI
		scripts/config --enable CONFIG_LRNG_TESTING_MENU
		scripts/config --disable CONFIG_LRNG_RAW_HIRES_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_JIFFIES_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_IRQ_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_IRQFLAGS_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_RETIP_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_REGS_ENTROPY
		scripts/config --disable CONFIG_LRNG_RAW_ARRAY
		scripts/config --disable CONFIG_LRNG_IRQ_PERF
		scripts/config --disable CONFIG_LRNG_ACVT_HASH
		scripts/config --enable CONFIG_LRNG_RUNTIME_ES_CONFIG
		scripts/config --disable CONFIG_LRNG_RUNTIME_MAX_WO_RESEED_CONFIG
		scripts/config --disable CONFIG_LRNG_TEST_CPU_ES_COMPRESSION
		scripts/config --enable CONFIG_LRNG_SELFTEST
		scripts/config --disable CONFIG_LRNG_SELFTEST_PANIC
	elif [  "$_lrng_config" = "xanmod" ]; then
		echo "Enabling Linux Random Number Generator with xanmod config..."
		scripts/config --enable CONFIG_LRNG
		scripts/config --disable CONFIG_LRNG_OVERSAMPLE_ENTROPY_SOURCES
		scripts/config --set-val CONFIG_CONFIG_LRNG_OVERSAMPLE_ES_BITS 0
		scripts/config --set-val CONFIG_LRNG_SEED_BUFFER_INIT_ADD_BITS 0
		scripts/config --enable CONFIG_LRNG_IRQ
		scripts/config --enable CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED
		scripts/config --disable CONFIG_LRNG_CONTINUOUS_COMPRESSION_DISABLED
		scripts/config --enable CONFIG_LRNG_ENABLE_CONTINUOUS_COMPRESSION
		scripts/config --disable CONFIG_LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_32
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_256
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_512
		scripts/config --enable CONFIG_LRNG_COLLECTION_SIZE_1024
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_2048
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_4096
		scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_8192
		scripts/config --set-val CONFIG_LRNG_COLLECTION_SIZE 1024
		scripts/config --disable CONFIG_LRNG_HEALTH_TESTS
		scripts/config --set-val CONFIG_LRNG_RCT_CUTOFF 31
		scripts/config --set-val CONFIG_LRNG_APT_CUTOFF 325
		scripts/config --set-val CONFIG_LRNG_IRQ_ENTROPY_RATE 256
		scripts/config --enable CONFIG_LRNG_JENT
		scripts/config --set-val CONFIG_LRNG_JENT_ENTROPY_RATE 16
		scripts/config --enable CONFIG_LRNG_CPU
		scripts/config --set-val CONFIG_LRNG_CPU_ENTROPY_RATE 8
		scripts/config --disable CONFIG_LRNG_DRNG_SWITCH
		scripts/config --disable CONFIG_LRNG_DRBG
		scripts/config --disable CONFIG_LRNG_TESTING_MENU
		scripts/config --disable CONFIG_LRNG_SELFTEST
	elif [ "$_lrng_config" = "none" ]; then
		echo "Disabling Linux Random Number Generator..."
		scripts/config --disable CONFIG_LRNG
	else
		if [ -n "$_lrng_config" ]; then
			error "The value $_lrng_config is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Enabling Linux Random Number Generator failed!"
		exit
	fi

    ### Optionally disable NUMA for 64-bit kernels only
        # (x86 kernels do not support NUMA)
	if [ -n "$_NUMAdisable" ]; then
		echo "Disabling NUMA from kernel config..."
		scripts/config --disable CONFIG_NUMA
	fi

    ### Selecting the ZSTD compression level
	if [ "$_zstd_level" = "ultra" ]; then
		echo "Enabling highest ZSTD compression ratio..."
		scripts/config --set-val CONFIG_KERNEL_ZSTD_LEVEL 19
		scripts/config --enable CONFIG_KERNEL_ZSTD_LEVEL_ULTRA
	elif [ "$_zstd_level" = "normal" ]; then
		echo "Enabling standard ZSTD compression ratio..."
		scripts/config --set-val CONFIG_KERNEL_ZSTD_LEVEL 19
		scripts/config --disable CONFIG_KERNEL_ZSTD_LEVEL_ULTRA
	else
		if [ -n "$_zstd_level" ]; then
			error "The value $_zstd_level is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Selecting the ZSTD compression level failed!"
		exit
	fi

    ### Selecting the ZSTD module compression level
	if [ "$_zstd_module_level" = "ultra" ]; then
		echo "Enabling highest ZSTD module compression ratio..."
		scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL 19
		scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD_ULTRA
		scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL_ULTRA 22
	elif [ "$_zstd_module_level" = "normal" ]; then
		echo "Enabling standard ZSTD module compression ratio..."
		scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL 19
		scripts/config --disable CONFIG_MODULE_COMPRESS_ZSTD_ULTRA
	else
		if [ -n "$_zstd_module_level" ]; then
			error "The value $_zstd_module_level is invalid. Choose the correct one again."
		else
			error "The value is empty. Choose the correct one again."
		fi
		error "Selecting the ZSTD module compression level failed!"
		exit
	fi

    ### Optionally load needed modules for the make localmodconfig
        # See https://aur.archlinux.org/packages/modprobed-db
	if [ -n "$_localmodcfg" ]; then
		if [ -f $HOME/.config/modprobed.db ]; then
		echo "Running Steven Rostedt's make localmodconfig now"
		make LSMOD=$HOME/.config/modprobed.db localmodconfig
	else
		echo "No modprobed.db data found"
		exit
		fi
	fi

    ### Rewrite configuration
        echo "Rewrite configuration..."
        make prepare
        yes "" | make config >/dev/null
        diff -u ../config .config || :

    ### Prepared version
        make -s kernelrelease > version
        echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
	[[ -z "$_makenconfig" ]] ||  make nconfig

    ### Running make menuconfig
	[[ -z "$_makemenuconfig" ]] || make menuconfig

    ### Running make xconfig
	[[ -z "$_makexconfig" ]] || make xconfig

    ### Running make gconfig
	[[ -z "$_makegconfig" ]] || make gconfig

    ### Save configuration for later reuse
	echo "Save configuration for later reuse..."
	cat .config > "${startdir}/config.last"
}

build() {
  cd $_srcname

  make all
  make htmldocs
}

_package-kernel() {
  pkgdesc="The $pkgdesc kernel and modules with the ${_lucjanname}-${_lucjanrev} patchset. AMD K10-family optimized."
  depends=('coreutils' 'kmod' 'initramfs-lucjan')
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices'
              'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
              'initramfs-zstd: install modules compressed in ZSTD format - read the information above in PKGBUILD')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE)
  groups=('linux-juliagoda-git')

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel. K10-family optimized."
  depends=('linux-juliagoda-git-kernel' 'pahole')
  groups=('linux-juliagoda-git')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-docs() {
  pkgdesc="Documentation for the $pkgdesc kernel. K10-family optimized."
  depends=('linux-juliagoda-git-kernel')
  groups=('linux-juliagoda-git')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing documentation..."
  local src dst
  while read -rd '' src; do
    dst="${src#Documentation/}"
    dst="$builddir/Documentation/${dst#output/}"
    install -Dm644 "$src" "$dst"
  done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/share/doc"
  ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"
}

pkgname=("$pkgbase-kernel" "$pkgbase-headers" "$pkgbase-docs")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

sha512sums=('SKIP'
            '1d3ca3f79789525e61579f32a11cfd510e37cb3c5580026493f47bbcdf9feb447acc0ee2d2babf997d78e2ef4d6ba31d5a6f9f76c83ab2ecd43d67503823f922'
            'SKIP'
            '2f4599dfd31ff795d6f04b1f6a8429f4054d5e9e84f2d3d9c241ea64fc048307d2bcba36ce4fa9669563c0e775d4490509a186f1f38dddc38e9617e9e1809a07')

validpgpkeys=(
              '399521CE9D6D65B35EEF0F8C79AFA05ABDB26C5A' # Piotr Gorski
             )
