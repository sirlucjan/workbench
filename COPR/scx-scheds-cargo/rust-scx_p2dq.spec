## START: Set by rpmautospec
## (rpmautospec version 0.8.2)
## RPMAUTOSPEC: autorelease, autochangelog
%define autorelease(e:s:pb:n) %{?-p:0.}%{lua:
    release_number = 1;
    base_release_number = tonumber(rpm.expand("%{?-b*}%{!?-b:1}"));
    print(release_number + base_release_number - 1);
}%{?-e:.%{-e*}}%{?-s:.%{-s*}}%{!?-n:%{?dist}}
## END: Set by rpmautospec

# Generated by rust2rpm 25
%bcond_without check

%global crate scx_p2dq

Name:           rust-scx_p2dq
Version:        1.0.21
Release:        %autorelease
Summary:        scx_p2dq A simple pick two load balancing scheduler in BPF

License:        GPL-2.0-only
URL:            https://crates.io/crates/scx_p2dq
Source:         %{crates_source}

BuildRequires:  cargo-rpm-macros >= 24
ExcludeArch:    %{ix86}

%global _description %{expand:
A simple pick 2 load balancing scheduler with multi-layer queueing.

The p2dq scheduler is a general purpose scheduler that uses a pick two algorithm for
load balancing tasks across last level caches (LLCs) and NUMA nodes.
p2dq uses in kernel task dispatch queues (DSQs) and BPF arena based queues (ATQs) depending on configuration.

The scheduler handles all scheduling decisions in BPF and the userspace component is only for
metric reporting and some integrations with other subsystems such as power management.
https://github.com/sched-ext/scx/tree/main}

%description %{_description}

%package     -n %{crate}
Summary:        %{summary}

License:        GPL-2.0-only AND (MIT OR Apache-2.0) AND Unicode-DFS-2016 AND Apache-2.0 AND (Apache-2.0 OR BSL-1.0) AND (Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT) AND BSD-2-Clause AND BSD-3-Clause AND (BSD-3-Clause OR MIT OR Apache-2.0) AND ISC AND (LGPL-2.1-only OR BSD-2-Clause) AND MIT AND (Unlicense OR MIT) AND Zlib
# LICENSE.dependencies contains a full license breakdown

%description -n %{crate} %{_description}

%files       -n %{crate}
%license LICENSE
%license LICENSE.dependencies
%doc README.md
%{_bindir}/scx_p2dq

%prep
%autosetup -n %{crate}-%{version} -p1
%cargo_prep

%generate_buildrequires
%cargo_generate_buildrequires

%build
%cargo_build
%{cargo_license_summary}
%{cargo_license} > LICENSE.dependencies

%install
%cargo_install

%if %{with check}
%check
%cargo_test
%endif
